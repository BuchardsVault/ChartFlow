

// A program is a sequence of statements.
Model:
    statements*=Statement
;


Statement:
      ShowStmt          // print table(s)
    | ChartStmt         // draw chart(s)
    | LetStmt           // create or overwrite variable
    | ClearStmt         // clear one variable or wipe all
;


ShowStmt:
    'show' asset=AssetSpec date=DateClause
;


ChartStmt:
    'chart' asset=AssetSpec date=DateClause
        ('as' charttype=ChartType)?            // default = line
        ('with' options+=Option[','])?         // theme=…, sma=…
;

// Options for charts
Option:
    key=ID '=' value=Expr
;

// Chart types
ChartType:
    'candlestick' | 'line' | 'bar' | 'ohlc'
;


LetStmt:
    'let' name=ID '=' expr=Expr
;

// ───────────────────────  clearing  ────────────────────────────
ClearStmt:
    'clear' vars+=ID[',']
;

// ───────────────────────  assets  ──────────────────────────────
AssetSpec:
      symbol=STRING
    | '[' symbols+=STRING[','] ']'       // list literal
    | var=ID                             // variable reference
;

// ───────────────────────  date clauses  ────────────────────────
DateClause:
      'from' start=Date 'to' end=Date
    | 'in'  year=INT
    | 'last' amount=INT unit=TimeUnit
;

// Supported units after “last”
TimeUnit:
        'days'  | 'day'
    | 'weeks' | 'week'
    | 'months'| 'month'
    | 'years' | 'year'
;

// ───────────────────────  expressions  ────────────────────────
Expr:
      List
    | Literal
    | FunctionCall
    | ID
;

// List literal
List:
    '[' elements+=Expr[','] ']'
;

// Function call (for built‑ins like sma)
FunctionCall:
    name=ID '(' args+=Expr[','] ')'
;

// ───────────────────────  atomics  ────────────────────────────
Literal:
    STRING | INT | FLOAT
;

// ───────────────────────  terminals  ──────────────────────────
Date   : /[0-9]{4}(-[0-9]{2}-[0-9]{2})?/ ;
INT    : /-?[0-9]+/ ;
FLOAT  : /-?[0-9]+\.[0-9]*/ ;
ID     : /[a-zA-Z_][a-zA-Z0-9_]*/ ;
STRING : /\"([^\"\\]|\\.)*\"/ ;
Comment: /\/\/.*$/ ;
